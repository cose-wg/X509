<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml" >

  <!ENTITY RFC2582 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2582.xml" >
  <!ENTITY RFC2585 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2585.xml" >
  <!ENTITY RFC2633 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2633.xml" >
  <!ENTITY RFC2898 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2898.xml" >
  <!ENTITY RFC3394 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml" >
  <!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml" >
  <!ENTITY RFC3610 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3610.xml" >
  <!ENTITY RFC4231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4231.xml" >
  <!ENTITY RFC4262 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4262.xml" >
  <!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml" >
  <!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml" >
  <!ENTITY RFC5480 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml" >
  <!ENTITY RFC5652 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml" >
  <!ENTITY RFC5751 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5751.xml" >
  <!ENTITY RFC5752 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5752.xml" >
  <!ENTITY RFC5869 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5869.xml" >
  <!ENTITY RFC5990 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5990.xml" >
  <!ENTITY RFC6090 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml" >
  <!ENTITY RFC6151 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6151.xml" >
  <!ENTITY RFC6979 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6979.xml" >
  <!ENTITY RFC7049 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7049.xml" >
  <!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml" >
  <!ENTITY RFC7252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml" >
  <!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml" >
  <!ENTITY RFC7516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml" >
  <!ENTITY RFC7517 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml" >
  <!ENTITY RFC7518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7518.xml" >
  <!ENTITY RFC7539 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7539.xml" >

  <!ENTITY CDDL SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.greevenbosch-appsawg-cbor-cddl.xml" >
  <!ENTITY CBCMAC SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mcgrew-aead-aes-cbc-hmac-sha2.xml" >
  <!ENTITY EDHOC SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.selander-ace-cose-ecdhe.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-schaad-cose-x509-latest" category="info">
  <front>
    <title abbrev="COSE X.509">CBOR Object Signing and Encryption (COSE): Headers for carrying and referencing X.509 certificates</title>

    <author initials="J." surname="Schaad" fullname="Jim Schaad">
      <organization>August Cellars</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>

    <date/>

    <area>Security</area>
    <abstract>
      <t>
        The CBOR Encoded Message (COSE) structure syntax uses the COSE Key structure for placing keys in a message.
        This document extends the way that keys can be identified and transported by providing parameters that refer to or contain X.509 certificates in messages and in the COSE Key structure.
      </t>

      <t>
        This document defines a set of hash algorithms for COSE.
        These algorithms are needed in order to have X.509 certificates referred to by a thumbprint.
      </t>
    </abstract>

    <note title="Contributing to this document">
      <!-- RFC EDITOR - Please remove this note before publishing -->
      <t>
        The source for this draft is being maintained in GitHub.
        Suggested changes should be submitted as pull requests  at <eref target="https://github.com/cose-wg/X509"/>.
        Instructions are on that page as well.
        Editorial changes can be managed in GitHub, but any substantial issues need to be discussed on the COSE mailing list.
      </t>
    </note>
  </front>

  <middle>

    <section anchor="introduction" title="Introduction">
      <t>
        In the process of writing <xref target="RFC8152"/> discussions where held on the question of X.509 certificates  <xref target="RFC5280"/>  and if there was a needed to provide for them.
        At the time there were no use cases presented that appeared to have a sufficient set of support to include these headers.
        Since that time a number of cases where X.509 certificate support is necessary have been defined.
        This document provides a set of headers that will allow applications to transport and refer to X.509 certificates in a consistent manner.
      </t>

      <t>
	Some of the constrained device situations are being used where an X.509 PKI is already installed.
	One of these situations is the 6tish environment for enrollment of devices where the certificates are installed at the factory.
	The <xref target="I-D.selander-ace-cose-ecdhe"/> draft was also written with the idea that long term certificates could be used to provide for authentication of devices and uses them to establish session keys.
	A final scenario is the use of COSE as a messaging application where long term existence of keys can be used along with a central authentication authority.
	The use of certificates in this scenario allows for key management to be used which is well understood.
      </t>

      <t>
        When <xref target="RFC8152"/> was written, there were no requirements for hash algorithms to be included in the algorithm registry.
        The use of thumbprints to refer to X.509 certificates is defined in this document which requires the use of hash algorithms.
        There have also been other working groups in the IETF that have expressed a requirement for hash algorithms to do have sections of content be provided by reference rather than including it in the main message.
        This document defines a set of hash algorithms for both of these purposes.
      </t>
      
      <section anchor="requirements-terminology" title="Requirements Terminology">
        <!--  NOTE FOR AUTHORS:
             We use the following terms in the document
             
             field - an entry in a CBOR array
             parameter - an element in a CBOR map (as oppose to 'member' which is frequently used in JSON
             label - the key of an element in a CBOR map.   Unless otherwise separated from text, enclose with single quote marks
             value - the value of an element in a CBOR map
        -->

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
        </t>

      </section>

      <section title="Open Questions">
        <t>
        <list>
          <t>
            Should we define an extended key usage?
          </t>
          <t>
            Are there any special certificate valiation text to be added?
          </t>
          <t>
            List of other hash algorithms to be added.
          </t>
          <t>
            Specific security considerations issues.
          </t>
        </list>
        </t>
      </section>
    </section>

    <section title="X.509 COSE Headers">
      <t>
        The use of X.509 certificates allows for an existing trust infrastructure to be used with COSE.
	This includes the full suite of enrollment protocols, trust anchors, trust chaining and revocation checking that have been defined over time by the IETF and other organizations.
	The key structures that have been defined in COSE currently do not support all of these properties although some may be found in COSE Web Tokens (CWT) <xref target="RFC8392"/>.
      </t>

      <t>
	It is not necessarily expected that constrained devices will fully support the evaluation and processing of X.509 certificates, it is perfectly reasonable for a certificate to be assigned to a device which it can then provide to a relying party along with a signature or encrypted message, the relying party not being a constrained device.
      </t>

      <t>
        Certificates obtained from any of these methods MUST still be validated.
        This validation can be done via the PKIX rules in <xref target="RFC5280"/> or by using a different trust structure, such as a trusted certificate distributer for self-signed certificates.
        The PKIX validation includes matching against the trust anchors configured for the application.
        These rules apply to certificates of a chain length of one as well as longer chains.
        If the application cannot establish a trust in the certificate, then it cannot be used.
      </t>

      <t>
        The header parameters defined in this document are:

        <list style="hanging">
	  <t hangText="x5bag:">
	    This header parameters contains a bag of X.509 certificates.
	    The set of certificates in this header are unordered and may contain self-signed certificates.
            The certificate bag can contain certificates which are completely extraneous to the message.
	    (An example of this would be to carry a certificate with a key agreement key usage in a signed message.)
	    As the certificates are unordered, the party evaluating the signature will need to do the necessary path building.
	    Certificates needed for any particular chain to be built may be absent from the bag.
	    <vspace blankLines="1"/>
	    As this header element does not provide any trust, the header parameter can be in either a protected or unprotected header bag.
	    <vspace blankLines="1"/>
            This header parameter allows for a single or a bag of X.509 certificates to be carried in the message.
            <list style="symbols">
              <t>
                If a single certificate is conveyed, it is placed in a CBOR bstr.
              </t>
              <t>
                If multiple certificates are conveyed, a CBOR array of bstrs is used.
		Each certificate being in it's own slot.
              </t>
            </list>
	  </t>
	  
          <t hangText="x5chain:">
	    This header parameter contains an ordered array of X.509 certificates.
	    The certificates are to be ordered starting with the certificate containing the end-entity key followed by the certificate which signed it and so on.
	    There is no requirement for the entire chain to be present in the element if there is reason to believe that the relying party will already have it.
	    <vspace blankLines="1"/>
	    As this header element does not provide any trust, the header parameter can be in either a protected or unprotected header bag.
	    <vspace blankLines="1"/>
            This header parameter allows for a single or a bag of X.509 certificates to be carried in the message.
            <list style="symbols">
              <t>
                If a single certificate is conveyed, it is placed in a CBOR bstr.
              </t>
              <t>
                If multiple certificates are conveyed, a CBOR array of bstrs is used.
		Each certificate being in it's own slot.
              </t>
            </list>
          </t>

          <t hangText="x5t:">
            This header parameter provides the ability to identify an X.509 certificate by a hash value.
            The parameter is an array of two elements.
            The first element is an algorithm identifier which is a signed integer or a string containing the hash algorithm identifier.
            The second element is a binary string containing the hash value.
	    <vspace blankLines="1"/>
	    As this header element does not provide any trust, the header parameter can be in either a protected or unprotected header bag.
            <vspace/>
            For interoperability, applications which use this header parameter MUST support the hash algorithm 'sha256', but can use other hash algorithms.
          </t>

          <t hangText="x5u:">
            This header parameter provides the ability to identify an X.509 certificate by a URL.
            The referenced resource can be any of the following media types:
            <list style="symbols">
              <t>application/pkix-cert <xref target="RFC2585"/></t>
              <t>application/pkcs7-mime; smime-type="certs-only" <xref target="I-D.ietf-lamps-rfc5751-bis"/></t>
              <t>application/x-pem-file <xref target="RFC7468"/> Should we support a PEM type? I cannot find a registered media type for one</t> <!-- application/x-pem-file -->
            </list>
	    <vspace blankLines="1"/>
	    As this header element implies a trust relationship, the header parameter MUST be in the protected header bag.
            <vspace/>
            The URL provided MUST provide integrity protection and server authentication.
            For example, an HTTP or CoAP GET request to retrieve a certificate MUST use TLS <xref target="RFC5246"/> or DTLS.
            If the certificate does not chain to an existing trust anchor, the certificate MUST NOT be trusted unless the server is configured as trusted to provide new trust anchors.
            This will normally be the situation when self-signed certificates are used.
          </t>
        </list>
      </t>

      <t>
	The header parameters used in the following locations:
	<list style="symbols">
	  <t>
	    COSE_Signature and COSE_Sign0 objects, in these objects they identify the key that was used for generating signature.
	  </t>

          <t>
            COSE_recipient objects, in this location they may be used to identify the certificate for the recipient of the message.
          </t>
	</list>
      </t>

      <texttable anchor="Tags" title="X.509 COSE Headers">
        <ttcol>Name</ttcol><ttcol>Value</ttcol><ttcol>value type</ttcol><ttcol>description</ttcol>

        <c>x5bag</c><c>TBD4</c><c>COSE_X509</c><c>An unordered bag of X.509 certificates</c>
        <c>x5chain</c><c>TBD3</c><c>COSE_X509</c><c>An ordered chain of X.509 certificates</c>
        <c>x5t</c><c>TBD1</c><c>COSE_CertHash</c><c>Hash of an X.509 certificate</c>
        <c>x5u</c><c>TBD2</c><c>uri</c><c>URL pointing to an X.509 certificate</c>
      </texttable>

      <t>
        Below is an equivalent CDDL <xref target="I-D.ietf-cbor-cddl"/> description of the text above.
      </t>

      <figure><artwork type="CDDL">
COSE_X509 = bstr / [ 2*certs: bstr ]
COSE_CertHash = [ hashAlg: (int / tstr), hashValue: bstr ]
</artwork>
      </figure>
    </section>

    <section title="X.509 certificates and static-static ECDH">
      <t>
        The header parameters defined in the previous section are used to identify the recipient certificates for the ECDH key agreement algorithms.
        In this section we define the algorithm specific parameters that are used for identifying or transporting the senders key for static-static key agreement algorithms.
      </t>
      
      <texttable anchor="Tags2" title="Static ECDH Algorithm Values">
        <ttcol>Name</ttcol><ttcol>Value</ttcol><ttcol>Type</ttcol><ttcol>Algorithm</ttcol><ttcol>Description></ttcol>
        <c>static key X.509 thumbprint</c><c>TBD</c><c>COSE_CertHash</c>
        <c>ECDH-SS+HKDF-256, ECDH-SS+HKDF-512, ECDH-SS+A128KW, ECDH-SS+AES192KW, ECDH-SS+AES256KW</c>
        <c>Thumbprint for the senders X.509 certificate</c>

        <c>static key X.509 URL</c><c>TBD</c><c>uri</c>
        <c>ECDH-SS+HKDF-256, ECDH-SS+HKDF-512, ECDH-SS+A128KW, ECDH-SS+AES192KW, ECDH-SS+AES256KW</c>
        <c>URL for the senders X.509 certificate</c>

        <c>static key X.509 cert chain</c><c>TBD</c><c>COSE_X509</c>
        <c>ECDH-SS+HKDF-256, ECDH-SS+HKDF-512, ECDH-SS+A128KW, ECDH-SS+AES192KW, ECDH-SS+AES256KW</c>
        <c>static key X.509 certificate chain</c>
        
      </texttable>
    </section>

    <section title="Hash Algorithm Identifiers">
      <t>
	The core COSE document did have a need for a standalone hash algorithm, and thus did not define any.
	In this document, two hash algorithms are defined for use with the 'x5t' header parameter.
      </t>
      
      <section title="SHA-2 256-bit Hash">
        <t>
          
          Define an algorithm identifier for SHA-256.
        </t>
      </section>

      <section title="SHA-2 256-bit Hash trucated to 64 bits">
	<t>
	  This hash function uses the SHA-2 256-bit hash function as in the previous section, however it truncates the result to 64-bits for transmission.
	  The fact that it is a truncated hash means that there is now a high likelihood that collisions will occur, thus this hash function cannot be used in situations where a unique items is required to be identified.
	  Luckily for the case of identifying a certificate that is not a requirement, the only requirement is that the number of potential certificates (and thus keys) to be tried is reduced to a small number.
	  (Hopefully that number is one, but it can not be assumed to be.)
	  After the set of certificates has been filtered down, the public key in each certificate will need to be tried for the operation in question.
	  The certificate can be validated either before or after it has been checked as working.
	  The trade-offs involved are:
	  <list style="symbols">
	    <t>Certificate validation before using the key will imply that more network traffic may be required in order to fetch certificates and do revocation checking.</t>
	    <t>
	      Certificate validation after using the key means that bad keys can be used and, if not carefully checked, the result may be used prior to completing the certificate validation.
	      Using unvalidated keys can expose the device to more timing and oracle attacks as the attacker would be able to see if the key operation succeeded or failed as no network traffic to validate the certificate would ensue.
	    </t>
	  </list>
	</t>
      </section>
    </section>
    
    <section anchor="iana-considerations" title="IANA Considerations">

      
      <section anchor="cose-header-key-table" title="COSE Header Parameter Registry">

        <t>
          IANA is requested to register the new COSE Header items in <xref target="Tags"/> in the "COSE Header Parameters" registry.

        </t>

      </section>

      <section title="COSE Header Algorithm Parameter Registry">

        <t>
          IANA is requested to register the new COSE Header items in <xref target="Tags2"/> in the "COSE Header Algorithm Parameters" registry.

        </t>

      </section>
      
      <section anchor="cose-algorithm-registry" title="COSE Algorithm Registry">

        <t>
          IANA is requested to register the following algorithms in the "COSE Algorithms" registry.
        </t>

        <texttable>
          <ttcol>Name</ttcol>
          <ttcol>Value</ttcol>
          <ttcol>Description</ttcol>
          <ttcol>Reference</ttcol>
          <ttcol>Recommended</ttcol>
          <c>SHA-256</c><c>TBD</c><c>SHA-2 256-bit Hash</c><c>[This Document]</c><c>Yes</c>
          <c>SHA-256/64</c><c>TBD</c><c>SHA-2 256-bit Hash trucated to 64-bits</c><c>[This Document]</c><c>No</c>
        </texttable>
        
      </section>

    </section>
    
    <section anchor="security-considerations" title="Security Considerations">
      
      <t>
        There are security considerations:
      </t>
      <t>
      <list>
        <t>
          Self-signed certificates and Trust Anchors
        </t>
      </list>
      </t>
    </section>
  </middle>

  <back>

    <references title='Normative References'>
      <?rfc include="reference.RFC.2119.xml" ?>
      &RFC5280;
      <?rfc include="reference.RFC.8174.xml" ?>
      <?rfc include="reference.I-D.schaad-cose-rfc8152bis-struct.xml" ?>
      
    </references>

    <references title='Informative References'>
      &RFC5246;
      <?rfc include="reference.I-D.ietf-lamps-rfc5751-bis.xml" ?>
      &RFC2585;
      &EDHOC;
      <?rfc include="reference.RFC.7468.xml" ?>
      <?rfc include="reference.RFC.8392.xml" ?>
      <?rfc include="reference.RFC.8152.xml" ?>
      <?rfc include="reference.I-D.ietf-cbor-cddl.xml" ?>
    </references>

  </back>
</rfc>
